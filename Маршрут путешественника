Маршрут путешественника
Есть двухмерный массив с билетами путешественника, 
который совершил последовательность перелетов. 
Маршрут по которому летел путешественник не может быть кольцевой. 
Необходимо расставить билеты по порядку

Пример: Входные данные: [["Стамбул", "Лондон"], ["Москва"," Стамбул"], ["Лондон"," Амстердам"]] 
Выходные данные: [["Москва","Стамбул"], ["Стамбул","Лондон"], ["Лондон","Амстердам"]]

// На Клиенте
//"Стамбул", "Лондон"], ["Москва"," Стамбул"], ["Лондон"," Амстердам"]]
	//Массив1 = Новый Массив(3, 2);
	//Массив1[0][0] = "Стамбул";
	//Массив1[0][1] = "Лондон";

	//Массив1[1][0] = "Москва";
	//Массив1[1][1] = "Стамбул";
	
	//Массив1[2][0] = "Лондон";
	//Массив1[2][1] = "Амстердам";


	// ["Нью_Йорк", "Лос_Анджелес"], ["Лос_Анджелес", "Лондон"], ["Таганрог", "Дмитров"], ["Дмитров", "Истанбул"]
	 
	Массив1 = Новый Массив(4, 2);
	Массив1[0][0] = "Нью_Йорк";
	Массив1[0][1] = "Лос_Анджелес";
	
	Массив1[1][0] = "Лос_Анджелес";
	Массив1[1][1] = "Лондон";
	
	Массив1[2][0] = "Париж";
	Массив1[2][1] = "Токио";
	
	Массив1[3][0] = "Лондон";
	Массив1[3][1] = "Париж";

	
	Серверный.РасставитьБилетыПоПорядкуСледования(Массив1);

// На Сервере

// Задача 5 Про билеты
Функция РасставитьБилетыПоПорядкуСледования(ВходныеДанные) Экспорт	
	
	// Создаем массив направлений Откуда и заполняем его
	МассивОткуда = ЗаполнитьМассивДанными(ВходныеДанные, 0);
	
	// СоздаемМасив направлений Куда и заполняем его		
	МассивКуда = ЗаполнитьМассивДанными(ВходныеДанные, 1);
	
	// Создадим Массив уникальных направлений "Откуда"
	// сравнив города из откуда с городами куда
	// Чтобы не было совпадений
	УникальныеОткуда = ЗаполнитьМассивУникальнымиОткуда(МассивОткуда, МассивКуда);	
	
	//По итогу получаем Москву - как единственное уникальное стартовое направление
	СтартовоеНаправление = УникальныеОткуда[0];
	
	// Теперь зная стартовое направление ищем первую пару билетов из основного массива,
	// а так же последующие пары	
	ИтоговыйМассив = НайтиВерноеНаправление(ВходныеДанные, СтартовоеНаправление);
	
	Возврат ИтоговыйМассив;
	
КонецФункции


Функция ЗаполнитьМассивДанными(ВходнойМассив, НомерСтолбца)
	ВозвратныйМассив = Новый Массив();
	Для i = 0 По ВходнойМассив.ВГраница() Цикл
		ВозвратныйМассив.Добавить(ВходнойМассив[i][НомерСтолбца]);
	КонецЦикла;	
	Возврат ВозвратныйМассив;
КонецФункции

Функция ЗаполнитьМассивУникальнымиОткуда(ВходнойМассивОткуда, ВходнойМассивКуда)
	Массив = Новый Массив();
	Для i = 0 По ВходнойМассивОткуда.ВГраница() Цикл
		Индекс = ВходнойМассивКуда.Найти(ВходнойМассивОткуда[i]);
		Если Индекс = Неопределено Тогда
			Массив.Добавить(ВходнойМассивОткуда[i]);
		КонецЕсли;
	КонецЦикла;
	Возврат Массив;
КонецФункции

Функция НайтиВерноеНаправление(ВходнойМассив, СтартовоеНаправление)
ИтоговыйМассив = Новый Массив(ВходнойМассив.Количество(), 2);
	ИндексСвободнойСтрокиИтоговогоМассива = 0;
	i = 0;
	Пока ВходнойМассив.Количество() > 0 Цикл  
		Если ВходнойМассив[i][0] = СтартовоеНаправление Тогда
			
			ИтоговыйМассив[ИндексСвободнойСтрокиИтоговогоМассива][0] = ВходнойМассив[i][0];
			ИтоговыйМассив[ИндексСвободнойСтрокиИтоговогоМассива][1] = ВходнойМассив[i][1];
			
			ВходнойМассив.Удалить(i);
			
			СтартовоеНаправление = ИтоговыйМассив[ИндексСвободнойСтрокиИтоговогоМассива][1];
			ИндексСвободнойСтрокиИтоговогоМассива = ИндексСвободнойСтрокиИтоговогоМассива + 1;
			i = -1;
		КонецЕсли;
			i = i + 1;

		КонецЦикла; 
	
	  Для i = 0 По ИтоговыйМассив.ВГраница() Цикл
	    Для j = 0 По ИтоговыйМассив[i].ВГраница() Цикл
	    	Сообщить(ИтоговыйМассив[i][j]);	
	    КонецЦикла;
	    КонецЦикла;
	  	
	Возврат ИтоговыйМассив;
	
КонецФункции



